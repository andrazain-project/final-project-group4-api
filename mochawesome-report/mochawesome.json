{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-23T14:03:50.582Z",
    "end": "2022-12-23T14:04:01.689Z",
    "duration": 11107,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "167e01fb-8a14-4cca-8ee6-dbe13c4a06e4",
      "title": "",
      "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
      "file": "\\tests\\scenarios\\restful-booker.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c8ca9797-31ef-41e3-9310-e4d626e88587",
          "title": "RESTFUL BOOKER END TO END",
          "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
          "file": "\\tests\\scenarios\\restful-booker.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure PING CHECK API is running",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure PING CHECK API is running",
              "timedOut": false,
              "duration": 1372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePingCheck = await restfulBooker.pingCheck();\nassert.equal(responsePingCheck.status, 201);\nassert.equal(responsePingCheck.data, \"Created\");\nconsole.log(responsePingCheck.data);",
              "err": {},
              "uuid": "7d45608a-a76f-46bb-9a8d-de7460bd7e11",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API is successfully working",
              "timedOut": false,
              "duration": 1064,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.VALID_CREATE_TOKEN\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\n//store token into token variable\nconsole.log(responseCreateToken.data.token);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "305791f6-67d1-4e1c-b720-e3ee4babff69",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout username is failed",
              "timedOut": false,
              "duration": 1302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_USERNAME\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "21e6e1a4-0227-4be8-967b-c8a8c0728987",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout username is failed",
              "timedOut": false,
              "duration": 1117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_PASSWORD\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "f372de31-1925-4cd5-bd67-b3f96a252f7d",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 1060,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(\n  data.CREATE_BOOKING\n);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nassert.containsAllKeys(responseCreateBooking.data.booking, [\"firstname\"]);\n//store bookingid into bookingId variable\nconsole.log(responseCreateBooking.data.bookingid);\nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "90f526ed-58d4-47e4-a04a-278337b31990",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY ID API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY ID API is successfully working",
              "timedOut": false,
              "duration": 1096,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseGetBookingById = await restfulBooker.getBookingByID(param);\nassert.equal(responseGetBookingById.status, 200);\nconsole.log(responseGetBookingById.data.firstname);\nfirstName = responseGetBookingById.data.firstname;",
              "err": {},
              "uuid": "a28b604d-e34d-43b0-9c7d-a4736118465c",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "timedOut": false,
              "duration": 2145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetBookingByFirstName =\n  await restfulBooker.getBookingByFirstName(firstName);\nassert.equal(responseGetBookingByFirstName.status, 200);",
              "err": {},
              "uuid": "8617c1cb-81e4-44cf-aced-bd8c7d67c0b7",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 1914,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBooking(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 200);\nassert.equal(\n  responseUpdateBooking.data.firstname,\n  data.UPDATE_BOOKING.firstname\n);\nconsole.log(responseUpdateBooking.data.firstname);\n//   assert.containsAllKeys(responseUpdateBooking.data, ['firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds']);",
              "err": {},
              "uuid": "1bb7403c-da6c-4a54-992a-1d8954e83bf5",
              "parentUUID": "c8ca9797-31ef-41e3-9310-e4d626e88587",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d45608a-a76f-46bb-9a8d-de7460bd7e11",
            "305791f6-67d1-4e1c-b720-e3ee4babff69",
            "21e6e1a4-0227-4be8-967b-c8a8c0728987",
            "f372de31-1925-4cd5-bd67-b3f96a252f7d",
            "90f526ed-58d4-47e4-a04a-278337b31990",
            "a28b604d-e34d-43b0-9c7d-a4736118465c",
            "8617c1cb-81e4-44cf-aced-bd8c7d67c0b7",
            "1bb7403c-da6c-4a54-992a-1d8954e83bf5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11070,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "resportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}