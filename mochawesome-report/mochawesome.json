{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-25T03:42:48.674Z",
    "end": "2022-12-25T03:43:03.076Z",
    "duration": 14402,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84e1f60f-28ff-4a7b-aa73-228b37ac27c9",
      "title": "",
      "fullFile": "/Users/herdianchandra/Documents/StudyJam/github/final-project-group4-api/tests/scenarios/restful-booker.js",
      "file": "/tests/scenarios/restful-booker.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0354a77a-3308-4724-8f1d-74f68ad665e6",
          "title": "RESTFUL BOOKER END TO END",
          "fullFile": "/Users/herdianchandra/Documents/StudyJam/github/final-project-group4-api/tests/scenarios/restful-booker.js",
          "file": "/tests/scenarios/restful-booker.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure PING CHECK API is running",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure PING CHECK API is running",
              "timedOut": false,
              "duration": 1301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePingCheck = await restfulBooker.pingCheck();\nassert.equal(responsePingCheck.status, 201);\nassert.equal(responsePingCheck.data, \"Created\");",
              "err": {},
              "uuid": "014f44f7-a84e-455b-ac22-55ab695fb2e6",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API is successfully working",
              "timedOut": false,
              "duration": 814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.VALID_CREATE_TOKEN\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\n//store token into token variable\nconsole.log(responseCreateToken.data.token);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "3dc76cb5-2a74-4ea7-9f51-4192e53a7098",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API without username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API without username is failed",
              "timedOut": false,
              "duration": 907,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(data.INVALID_CREATE_TOKEN_WITHOUT_USERNAME);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "bf6ccdff-940a-492e-bc18-18c893627c44",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API without username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API without username is failed",
              "timedOut": false,
              "duration": 1081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(data.INVALID_CREATE_TOKEN_WITHOUT_PASSWORD);\n\n    assert.equal(responseCreateToken.status, 200);\n    assert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\n    assert.equal(\n      responseCreateToken.data.reason,\n      data.ERROR_INVALID_CREATE_TOKEN.reason\n    );",
              "err": {},
              "uuid": "f3387f5c-be29-4a5a-b2a4-1bab79edd3a2",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 1225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(data.CREATE_BOOKING);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nassert.containsAllKeys(responseCreateBooking.data.booking, [\"firstname\"]);\n//store bookingid into bookingId variable\nconsole.log(responseCreateBooking.data.bookingid);\nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "fb24db6c-22f3-4825-a8ca-ee321332fca0",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY ID API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY ID API is successfully working",
              "timedOut": false,
              "duration": 822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseGetBookingById = await restfulBooker.getBookingByID(param);\nassert.equal(responseGetBookingById.status, 200);\nconsole.log(responseGetBookingById.data.firstname);\nfirstName = responseGetBookingById.data.firstname;",
              "err": {},
              "uuid": "b94e6cf7-e8b2-4b06-957c-8fe25c42aa93",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "timedOut": false,
              "duration": 1882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetBookingByFirstName = await restfulBooker.getBookingByFirstName(firstName);\n\nassert.equal(responseGetBookingByFirstName.status, 200);\nconsole.log(responseGetBookingByFirstName.data[0].bookingid);\nassert.isArray(responseGetBookingByFirstName.data);\nassert.equal((await restfulBooker.getBookingByID(responseGetBookingByFirstName.data[0].bookingid)).data.firstname,firstName);",
              "err": {},
              "uuid": "b376b7e1-a703-4430-a322-884c236c7934",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API is working",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBooking(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 200);\nassert.equal(\n  responseUpdateBooking.data.firstname,\n  data.UPDATE_BOOKING.firstname\n);\nconsole.log(responseUpdateBooking.data.firstname);\nassert.containsAllKeys(responseUpdateBooking.data, [\n  \"firstname\",\n  \"lastname\",\n  \"totalprice\",\n  \"depositpaid\",\n  \"bookingdates\",\n  \"additionalneeds\",\n]);",
              "err": {},
              "uuid": "c90790f0-429a-4952-89e8-a3c050f16430",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API without token failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API without token failed",
              "timedOut": false,
              "duration": 855,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBookingwithouttoken(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 403);\nassert.equal(responseUpdateBooking.data, \"Forbidden\");",
              "err": {},
              "uuid": "9e552725-fb08-4496-971f-1ea43fffd040",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure DELETE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure DELETE BOOKING API is working",
              "timedOut": false,
              "duration": 1842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseDeleteBooking = await restfulBooker.deleteBooking(bookingId);\nassert.equal(responseDeleteBooking.status, 201);\nassert.equal(responseDeleteBooking.data, \"Created\");",
              "err": {},
              "uuid": "77b3668f-ccd6-4abb-9a81-1c5e7b7a01b8",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API with unregistered booking id failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API with unregistered booking id failed",
              "timedOut": false,
              "duration": 1840,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBooking(\n  bookingId,\n  data.UPDATE_BOOKING\n);\n\nassert.equal(responseUpdateBooking.status, 405);",
              "err": {},
              "uuid": "b4080ac0-8631-4d2b-8f76-5464e7639612",
              "parentUUID": "0354a77a-3308-4724-8f1d-74f68ad665e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "014f44f7-a84e-455b-ac22-55ab695fb2e6",
            "3dc76cb5-2a74-4ea7-9f51-4192e53a7098",
            "bf6ccdff-940a-492e-bc18-18c893627c44",
            "f3387f5c-be29-4a5a-b2a4-1bab79edd3a2",
            "fb24db6c-22f3-4825-a8ca-ee321332fca0",
            "b94e6cf7-e8b2-4b06-957c-8fe25c42aa93",
            "b376b7e1-a703-4430-a322-884c236c7934",
            "c90790f0-429a-4952-89e8-a3c050f16430",
            "9e552725-fb08-4496-971f-1ea43fffd040",
            "77b3668f-ccd6-4abb-9a81-1c5e7b7a01b8",
            "b4080ac0-8631-4d2b-8f76-5464e7639612"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14372,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "resportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}