{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-23T15:00:12.412Z",
    "end": "2022-12-23T15:00:19.822Z",
    "duration": 7410,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4db0c1a-46e6-45cd-99dc-ca3ee63e0d1e",
      "title": "",
      "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
      "file": "\\tests\\scenarios\\restful-booker.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
          "title": "RESTFUL BOOKER END TO END",
          "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
          "file": "\\tests\\scenarios\\restful-booker.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure PING CHECK API is running",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure PING CHECK API is running",
              "timedOut": false,
              "duration": 1518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePingCheck = await restfulBooker.pingCheck();\nassert.equal(responsePingCheck.status, 201);\nassert.equal(responsePingCheck.data, \"Created\");",
              "err": {},
              "uuid": "37b1ce01-4f79-47b9-885f-06ae03e5692b",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API is successfully working",
              "timedOut": false,
              "duration": 1234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.VALID_CREATE_TOKEN\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\n//store token into token variable\nconsole.log(responseCreateToken.data.token);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "fcd59b0c-8a0a-4851-b6c3-1baa54ea64c3",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API without username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API without username is failed",
              "timedOut": false,
              "duration": 931,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_USERNAME\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "ab1caf00-bbd5-4dc9-afa6-5f66abbadca2",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API without username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API without username is failed",
              "timedOut": false,
              "duration": 919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_PASSWORD\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "ba5d8eb4-0ce9-4ec0-b493-9c12ebfd36f8",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(\n  data.CREATE_BOOKING\n);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nassert.containsAllKeys(responseCreateBooking.data.booking, [\"firstname\"]);\n//store bookingid into bookingId variable\nconsole.log(responseCreateBooking.data.bookingid);\nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "a26bb86c-a4fa-4814-a0ed-5c5bf3fe031d",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY ID API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY ID API is successfully working",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseGetBookingById = await restfulBooker.getBookingByID(param);\nassert.equal(responseGetBookingById.status, 200);\nconsole.log(responseGetBookingById.data.firstname);\nfirstName = responseGetBookingById.data.firstname;",
              "err": {},
              "uuid": "334e553a-baaa-482d-81e8-82cb33837c37",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API is working",
              "timedOut": false,
              "duration": 1852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseUpdateBooking = await restfulBooker.updateBooking(param, data.UPDATE_BOOKING);\nconsole.log(responseUpdateBooking);",
              "err": {},
              "uuid": "2a77f3a0-a9f9-4371-bc8c-4fcabc2fe464",
              "parentUUID": "12e1f0b8-61c1-4c3f-aac1-47d51a0a8a7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcd59b0c-8a0a-4851-b6c3-1baa54ea64c3",
            "ab1caf00-bbd5-4dc9-afa6-5f66abbadca2",
            "ba5d8eb4-0ce9-4ec0-b493-9c12ebfd36f8",
            "a26bb86c-a4fa-4814-a0ed-5c5bf3fe031d",
            "334e553a-baaa-482d-81e8-82cb33837c37",
            "2a77f3a0-a9f9-4371-bc8c-4fcabc2fe464"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7389,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "resportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}