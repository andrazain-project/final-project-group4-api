{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-24T13:19:13.939Z",
    "end": "2022-12-24T13:19:39.427Z",
    "duration": 25488,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c22ad45c-efff-420b-868f-485cfc58f889",
      "title": "",
      "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
      "file": "\\tests\\scenarios\\restful-booker.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
          "title": "RESTFUL BOOKER END TO END",
          "fullFile": "C:\\Users\\sulis\\Desktop\\automation\\learn\\final-project-group4-api-master\\tests\\scenarios\\restful-booker.js",
          "file": "\\tests\\scenarios\\restful-booker.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure PING CHECK API is running",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure PING CHECK API is running",
              "timedOut": false,
              "duration": 1518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePingCheck = await restfulBooker.pingCheck();\nassert.equal(responsePingCheck.status, 201);\nassert.equal(responsePingCheck.data, \"Created\");",
              "err": {},
              "uuid": "37b1ce01-4f79-47b9-885f-06ae03e5692b",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API is successfully working",
              "timedOut": false,
              "duration": 1607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.VALID_CREATE_TOKEN\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\n//store token into token variable\nconsole.log(responseCreateToken.data.token);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "d52e7402-429c-4574-8f0f-ba3de277bebb",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout username is failed",
              "timedOut": false,
              "duration": 2003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_USERNAME\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "605817b6-7933-4125-b4b9-c1517897d169",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout password is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout password is failed",
              "timedOut": false,
              "duration": 981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITHOUT_PASSWORD\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "a60a361c-e388-4726-a499-1e7deea14b90",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 3948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(\n  data.CREATE_BOOKING\n);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nassert.containsAllKeys(responseCreateBooking.data.booking, [\"firstname\"]);\n//store bookingid into bookingId variable\nconsole.log(responseCreateBooking.data.bookingid);\nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "e0818f75-2357-4d23-b88d-9abab9f953bf",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY ID API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY ID API is successfully working",
              "timedOut": false,
              "duration": 1552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseGetBookingById = await restfulBooker.getBookingByID(param);\nassert.equal(responseGetBookingById.status, 200);\nconsole.log(responseGetBookingById.data.firstname);\nfirstName = responseGetBookingById.data.firstname;",
              "err": {},
              "uuid": "b7fb6b51-b2cc-47c7-98af-777cb8b06086",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY FIRST NAME API is successfully working",
              "timedOut": false,
              "duration": 2604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetBookingByFirstName =\n  await restfulBooker.getBookingByFirstName(firstName);\nassert.equal(responseGetBookingByFirstName.status, 200);\nconsole.log(responseGetBookingByFirstName.data[0].bookingid);\nassert.isArray(responseGetBookingByFirstName.data);\nassert.equal((await restfulBooker.getBookingByID(responseGetBookingByFirstName.data[0].bookingid)).data.firstname,firstName);",
              "err": {},
              "uuid": "b21ff1e1-93a0-41a9-9da0-26cf06f12700",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API is working",
              "timedOut": false,
              "duration": 3001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBooking(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 200);\nassert.equal(\n  responseUpdateBooking.data.firstname,\n  data.UPDATE_BOOKING.firstname\n);\nconsole.log(responseUpdateBooking.data.firstname);\nassert.containsAllKeys(responseUpdateBooking.data, [\n  \"firstname\",\n  \"lastname\",\n  \"totalprice\",\n  \"depositpaid\",\n  \"bookingdates\",\n  \"additionalneeds\",\n]);",
              "err": {},
              "uuid": "0690a1c1-3683-413a-8cc0-d6e47870e383",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API without token failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API without token failed",
              "timedOut": false,
              "duration": 1885,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBookingwithouttoken(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 403);\nassert.equal(responseUpdateBooking.data, \"Forbidden\");",
              "err": {},
              "uuid": "616f7e4c-7045-4ce3-9cf1-8d25d68054ed",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure DELETE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure DELETE BOOKING API is working",
              "timedOut": false,
              "duration": 2246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseDeleteBooking = await restfulBooker.deleteBooking(bookingId);\nassert.equal(responseDeleteBooking.status, 201);\nassert.equal(responseDeleteBooking.data, \"Created\");",
              "err": {},
              "uuid": "c04ea485-7e7b-4430-bd4a-32629de0b40a",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API with unregistered booking id failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API with unregistered booking id failed",
              "timedOut": false,
              "duration": 4110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseUpdateBooking = await restfulBooker.updateBooking(\n  bookingId,\n  data.UPDATE_BOOKING\n);\nassert.equal(responseUpdateBooking.status, 405);",
              "err": {},
              "uuid": "1bb86106-d192-4170-971a-29995c5dd122",
              "parentUUID": "b4d2e81f-2b03-42f4-863e-a23ec1109184",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "37b1ce01-4f79-47b9-885f-06ae03e5692b",
            "d52e7402-429c-4574-8f0f-ba3de277bebb",
            "605817b6-7933-4125-b4b9-c1517897d169",
            "a60a361c-e388-4726-a499-1e7deea14b90",
            "e0818f75-2357-4d23-b88d-9abab9f953bf",
            "b7fb6b51-b2cc-47c7-98af-777cb8b06086",
            "b21ff1e1-93a0-41a9-9da0-26cf06f12700",
            "0690a1c1-3683-413a-8cc0-d6e47870e383",
            "616f7e4c-7045-4ce3-9cf1-8d25d68054ed",
            "c04ea485-7e7b-4430-bd4a-32629de0b40a",
            "1bb86106-d192-4170-971a-29995c5dd122"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25455,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "resportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}