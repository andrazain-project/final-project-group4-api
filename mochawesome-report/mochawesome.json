{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2022-12-22T19:54:08.742Z",
    "end": "2022-12-22T19:54:14.012Z",
    "duration": 5270,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f6a6e4b9-835d-4279-ae1f-e64f206fe5fd",
      "title": "",
      "fullFile": "/Users/herdianchandra/Documents/StudyJam/github/final-project-group4-api/tests/scenarios/restful-booker.js",
      "file": "/tests/scenarios/restful-booker.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e023689-0f96-46a9-bcf8-87339fb95e53",
          "title": "RESTFUL BOOKER END TO END",
          "fullFile": "/Users/herdianchandra/Documents/StudyJam/github/final-project-group4-api/tests/scenarios/restful-booker.js",
          "file": "/tests/scenarios/restful-booker.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure CREATE TOKEN API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API is successfully working",
              "timedOut": false,
              "duration": 1102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(data.VALID_CREATE_TOKEN);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\n//store token into token variable\nconsole.log(responseCreateToken.data.token);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "5b7d3ec6-e6e4-40cc-9b51-6709d93f854e",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout username is failed",
              "timedOut": false,
              "duration": 1057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(data.INVALID_CREATE_TOKEN_WITHOUT_USERNAME);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(responseCreateToken.data.reason, data.ERROR_INVALID_CREATE_TOKEN.reason);",
              "err": {},
              "uuid": "dadf259d-5d7a-4160-9c3c-d1c6deae2906",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE TOKEN API whitout username is failed",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE TOKEN API whitout username is failed",
              "timedOut": false,
              "duration": 1248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(data.INVALID_CREATE_TOKEN_WITHOUT_PASSWORD);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(responseCreateToken.data.reason, data.ERROR_INVALID_CREATE_TOKEN.reason);",
              "err": {},
              "uuid": "d4256f31-1a0c-4adf-89f2-a72350fdc4d7",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure CREATE BOOKING API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure CREATE BOOKING API is successfully working",
              "timedOut": false,
              "duration": 927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(data.CREATE_BOOKING);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nassert.containsAllKeys(responseCreateBooking.data.booking, [\"firstname\"]);\n//store bookingid into bookingId variable\nconsole.log(responseCreateBooking.data.bookingid)       \nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "b3028e23-8d41-469b-b89a-03a367c0d435",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure GET BOOKING BY ID API is successfully working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure GET BOOKING BY ID API is successfully working",
              "timedOut": false,
              "duration": 913,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseGetBookingById = await restfulBooker.getBookingByID(param);\nassert.equal(responseGetBookingById.status, 200);\nconsole.log(responseGetBookingById.data.firstname);",
              "err": {},
              "uuid": "35a2fb69-ef10-4267-8d6a-fc7a68c063ad",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure UPDATE BOOKING API is working",
              "fullTitle": "RESTFUL BOOKER END TO END Ensure UPDATE BOOKING API is working",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const param = bookingId;\nconst responseUpdateBooking = await restfulBooker.headers(\"Cookie\", \"token=\" + token)\n                                                .UPDATE_BOOKING(param, data.UPDATE_BOOKING);\nassert.equal(responseUpdateBooking.status, 200);\nassert.equal(responseUpdateBooking.data.firstname, data.UPDATE_BOOKING.firstname);\nassert.equal(responseUpdateBooking.data.lastname, data.UPDATE_BOOKING.lastname);\nassert.equal(responseUpdateBooking.data.totalprice, data.UPDATE_BOOKING.totalprice);\nassert.equal(responseUpdateBooking.data.additionalneeds, data.UPDATE_BOOKING.additionalneeds);\n\nconsole.log(responseGetBookingById.data.firstname);",
              "err": {
                "message": "TypeError: restfulBooker.headers is not a function",
                "estack": "TypeError: restfulBooker.headers is not a function\n    at Context.<anonymous> (file:///Users/herdianchandra/Documents/StudyJam/github/final-project-group4-api/tests/scenarios/restful-booker.js:68:59)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "6110cf19-f685-4756-8c97-c61c7a507a6d",
              "parentUUID": "6e023689-0f96-46a9-bcf8-87339fb95e53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b7d3ec6-e6e4-40cc-9b51-6709d93f854e",
            "dadf259d-5d7a-4160-9c3c-d1c6deae2906",
            "d4256f31-1a0c-4adf-89f2-a72350fdc4d7",
            "b3028e23-8d41-469b-b89a-03a367c0d435",
            "35a2fb69-ef10-4267-8d6a-fc7a68c063ad"
          ],
          "failures": [
            "6110cf19-f685-4756-8c97-c61c7a507a6d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5249,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}